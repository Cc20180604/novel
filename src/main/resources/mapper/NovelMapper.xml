<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间,类似包的概念: namespace:绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.cc.dao.NovelMapper">
    <!--<resultMap id="Novel" type="com.cc.model.Novel">-->
    <!--    <result column="id" property="id"/>-->
    <!--    <result column="name" property="name"/>-->
    <!--    <result column="author" property="author"/>-->
    <!--    <result column="describes" property="describes"/>-->
    <!--    <result column="wordcount" property="wordcount"/>-->
    <!--    <result column="chapterNames" property="chapterNames"  typeHandler="com.cc.model.ChapterNames"/>-->
    <!--</resultMap>-->
    <!--
        这里的parameterType可以不写
        insert元素:
        	获取自动增长的主键
            useGeneratedKeys属性: 是否需要返回自动生成的主键
            keyProperty: 把自动生成的主键值设置到对象的哪一个属性上
    -->

    <insert id="insertNovel" parameterType="com.cc.model.Novel" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO novel (id, type, name, author, describes, wordcount, lastChapter)
        VALUES (#{id}, #{type}, #{name}, #{author}, #{describes}, #{wordcount}, #{lastChapter})
    </insert>

    <update id="update" parameterType="com.cc.model.Novel">
        UPDATE novel SET type = #{type},
                         name = #{name},
                         author = #{author},
                         describes = #{describes},
                         wordcount = #{wordcount},
                         lastChapter = #{NovelMapper.xml}
        WHERE id = #{id};
    </update>


    <delete id="deleteById" parameterType="int">
        DELETE FROM novel WHERE id = #{id};
    </delete>

    <!--
        select元素: 专门用来做查询的SQL
            -id属性: 唯一标识,用来标识某一条SQL语句
            -parameterType属性: 表示执行该SQL语句需要的参数的类型(建议不写),MyBatis可以自行推断出来
            -resultType属性: 把结果集中每一行数据封装成什么类型的对象
    -->
    <!-- #{id} 相当于在测试方法中selectOne传递过来的值 -->
    <select id="selectById"  resultType="com.cc.model.Novel">
        SELECT * FROM novel WHERE id = #{id};
    </select>

    <!--随机取数据-->
    <select id="selectByRand"  resultType="com.cc.model.Novel">
        SELECT * FROM novel
        ORDER BY RAND() LIMIT #{num};
    </select>


    <!--获取最大id-->
    <select id="selectMaxId"  resultType="java.lang.Integer">
        SELECT max(id) from novel;
    </select>

    <!--查询id是否存在-->
    <select id="findId"  resultType="int">
        SELECT COUNT(1) FROM novel WHERE id = #{id};
    </select>

</mapper>

